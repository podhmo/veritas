{
  "sources.Base": {
    "typeRules": null,
    "fieldRules": {
      "ID": [
        "self != \"\" \u0026\u0026 self.size() \u003e 1"
      ]
    }
  },
  "sources.EmbeddedUser": {
    "typeRules": null,
    "fieldRules": {
      "ID": [
        "self != \"\" \u0026\u0026 self.size() \u003e 1"
      ],
      "Name": [
        "self != \"\""
      ]
    }
  },
  "sources.MockComplexData": {
    "typeRules": null,
    "fieldRules": {
      "Matrix": [
        "self.all(x, x.all(x, x != 0))"
      ],
      "ResourceMap": [
        "self.all(k, k.startsWith('id_'))",
        "self.all(v, v != null)"
      ],
      "UserEmails": [
        "self.all(x, x.matches('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$'))"
      ],
      "Users": [
        "self.all(x, x != null)"
      ]
    }
  },
  "sources.MockMoreComplexData": {
    "typeRules": null,
    "fieldRules": {
      "ListOfMaps": [
        "self.all(x, x.size() \u003e 0 \u0026\u0026 x.all(k, k.matches('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$')) \u0026\u0026 x.all(v, v != \"\"))"
      ],
      "MapOfSlices": [
        "self.all(k, k != \"\")",
        "self.all(v, v.all(x, x != \"\"))"
      ]
    }
  },
  "sources.MockUser": {
    "typeRules": [
      "self.Age \u003e= 18"
    ],
    "fieldRules": {
      "Email": [
        "self != \"\" \u0026\u0026 self.matches('^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$')"
      ],
      "ID": [
        "self != null"
      ],
      "Name": [
        "self != \"\""
      ]
    }
  },
  "sources.MockVariety": {
    "typeRules": null,
    "fieldRules": {
      "Count": [
        "self != 0"
      ],
      "IsActive": [
        "self"
      ],
      "Metadata": [
        "self.size() \u003e 0"
      ],
      "Scores": [
        "self.size() \u003e 0"
      ]
    }
  },
  "sources.ComplexUser": {
    "typeRules": null,
    "fieldRules": {
      "Name": [
        "self != \"\""
      ],
      "Scores": [
        "self.all(x, x >= 0)"
      ],
      "Metadata": [
        "self.keys().all(k, k != \"\") && self.values().all(v, v.size() >= 1)"
      ]
    }
  }
}